from datetime import datetime

import customtkinter as ctk
import requests
import threading
import time


SERVER_URL = "https://nezumi403.pythonanywhere.com"

def a_origin_els(a, b):
    res = []
    for i in range(len(a)):
        if a[i] not in b:
            res.append(a[i])
    return res

class MessengerApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.MESSAGES = []
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ –∏ —Ç–µ–º—ã
        self.title("–ß–∞—Ç–∏–∫")
        self.geometry("350x550")
        ctk.set_appearance_mode("dark")  # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "dark", "light", "system"

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_check_time = datetime.now()
        self.is_running = True

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.start_message_checker_thread()

    def create_widgets(self):
        self.text_display = ctk.CTkTextbox(self, state="disabled")
        self.text_display.pack(fill="both", expand=True, padx=10, pady=(10, 5))

        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏
        self.input_frame = ctk.CTkFrame(self)
        self.input_frame.pack(fill="x", padx=10, pady=5)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.entry_input = ctk.CTkEntry(self.input_frame, placeholder_text="–¢—ã–∫–∞–π –∫–Ω–æ–ø–æ—á–∫–∏...")
        self.entry_input.pack(side="left", fill="x", expand=True, padx=(0, 5))
        self.entry_input.bind("<Return>", self.send_message_handler)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.button_send = ctk.CTkButton(self.input_frame, text="‚û§",
            width=60, command=self.send_message_handler)
        self.button_send.pack(side="right")

    def send_message_handler(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏–ª–∏ –∫–ª–∞–≤–∏—à–∏ Enter."""
        message = self.entry_input.get().strip()
        if message:
            msg_with_time = '[' + str(time.strftime("%H:%M:%S")) + ']  ' + message
            # self.add_message_to_display(msg_with_time)
            self.entry_input.delete(0, "end")
            self.send_message(msg_with_time)
            #self.send_message(msg_with_time)
            return msg_with_time
        return None

    def send_message(self, message):
        try:
            response = requests.post(f"{SERVER_URL}/send",
                                     json={'msg': message},
                                     timeout=5)
            return True
        except Exception as e:
            return False

    def add_message_to_display(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å."""
        self.text_display.configure(state="normal")  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.text_display.insert("end", message + "\n")  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        self.text_display.see("end")  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        self.text_display.configure(state="disabled")  # –°–Ω–æ–≤–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    def check_for_new_messages(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        #print("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        response = requests.get(f"{SERVER_URL}/receive", timeout=5)
        # print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        data = response.json()

        if data['msg'] != self.MESSAGES and data['msg']:
            new_mess = a_origin_els(data['msg'], self.MESSAGES)
            """for ms in new_mess:
                print(f"üì®: {ms}\n")"""
            self.MESSAGES = data['msg']
            return new_mess
        return None

    def update_messages(self):
        """–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if not self.is_running:
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            new_messages = self.check_for_new_messages()

            if new_messages:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                for ms in new_messages:
                    self.after(0, self.add_message_to_display, f"{ms}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        if self.is_running:
            self.after(2000, self.update_messages)

    def start_message_checker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ GUI."""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        self.after(2000, self.update_messages)

    def start_message_checker_thread(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –∑–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""

        def message_checker_loop():
            while self.is_running:
                try:
                    new_messages = self.check_for_new_messages()
                    if new_messages:
                        for ms in new_messages:
                            self.after(0, self.add_message_to_display, f"–°–∏—Å—Ç–µ–º–∞: {ms}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

        thread = threading.Thread(target=message_checker_loop, daemon=True)
        thread.start()

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
        self.is_running = False
        self.destroy()

"""def send_message(message):
    try:
        print(f"üîÑ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: '{message}'")
        response = requests.post(f"{SERVER_URL}/send",
                                 json={'msg': message},
                                 timeout=5)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°—Ç–∞—Ç—É—Å: {response.status_code}")
        return True
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    return False"""


"""def test_connection():
    –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...")
        response = requests.get(f"{SERVER_URL}/receive", timeout=10)
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        return True
    except Exception as e:
        print(f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ URL?")
        print("2. –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤–µ–±-—Å–∞–π—Ç –Ω–∞ PythonAnywhere?")
        print("3. –ï—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ?")
        return False"""

def main():
    """# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if not test_connection():
        print("–ü—Ä–µ—Ä—ã–≤–∞—é —Ä–∞–±–æ—Ç—É...")
        exit()

    print("\nüí¨ –ß–∞—Ç –∑–∞–ø—É—â–µ–Ω! –í–≤–æ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")"""

    app = MessengerApp()
    app.mainloop()

    """while True:
        message = input("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if message == 'exit':
            break

        if send_message(message):
            print("‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

        # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        time.sleep(1)

        received = receive_message()
        if received:
            print(f"üë§ –ü–æ–ª—É—á–µ–Ω–æ: {received}")

        time.sleep(1)"""

if __name__ == '__main__':
    main()
